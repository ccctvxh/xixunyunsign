name: Daily Auto Sign

on:
  schedule:
    - cron: '0 8 * * *' # 每天凌晨8点触发

jobs:
  auto-sign:
    runs-on: windows-latest # 使用Windows最新版本的运行器
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # 检出代码仓库

      - name: Set up Python
        uses: actions/setup-python@v3 # 设置Python环境
        with:
          python-version: '3.x' # 指定Python版本

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip # 升级pip
          # 如果你的脚本依赖于其他Python包，可以在这里安装它们
          # pip install some-package
        shell: powershell # 使用PowerShell作为shell

      - name: Run auto sign script
        env:
          SIGN_PASSWORD: ${{ secrets.SIGN_PASSWORD }} # 从GitHub Secrets中获取密码
        run: |
          # 切换到脚本所在的目录（假设脚本已经包含在仓库中）
          cd .\path\to\your\script\ # 修改为你的脚本实际所在的路径

          # 运行Python脚本，并通过环境变量传递密码（注意：这里使用了示例路径和脚本名）
          python auto_sign.py --password "$env:SIGN_PASSWORD" # 如果你的脚本不支持从命令行传递密码，你需要修改脚本以接受环境变量或其他安全方式传递的密码
          # 注意：上面的命令行假设你的脚本接受一个--password参数，如果不是这样，请根据实际情况修改
          # 如果你的脚本不接受命令行参数，并且你需要直接运行它，那么你可能需要在脚本内部从环境变量中获取密码
          # 在这种情况下，请确保你的脚本已经正确配置了从环境变量读取密码的逻辑
        shell: powershell # 使用PowerShell作为shell

      # 注意：上面的run步骤中，我们尝试通过命令行参数传递密码，但这通常不是最佳实践。
      # 更安全的方法是修改你的Python脚本，使其能够从环境变量中读取密码。
      # 由于你的原始脚本使用了os.system来调用外部命令，并且明文存储了密码，
      # 你需要重写这部分逻辑以使用更安全的方法（比如subprocess模块和环境变量）。
      # 下面的注释展示了如果脚本已经修改为从环境变量读取密码，你应该如何运行它：
      # run: |
      #   cd .\path\to\your\script\
      #   python auto_sign.py # 假设脚本现在从环境变量SIGN_PASSWORD中读取密码

# 重要提示：
# 1. 请确保你已经在GitHub仓库的Settings > Secrets中创建了一个名为SIGN_PASSWORD的secret，并存储了你的密码。
# 2. 请根据你的实际情况修改上面的YAML文件，特别是路径和脚本名。
# 3. 由于你的脚本使用了os.system来调用外部命令，这通常不是最佳实践（特别是当涉及到密码等敏感信息时）。
#    考虑重写这部分逻辑以使用subprocess模块，并从环境变量中安全地读取密码。
